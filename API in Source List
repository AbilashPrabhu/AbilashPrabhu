  METHOD IF_HTTP_EXTENSION~HANDLE_REQUEST.


    TYPES : BEGIN OF TY_STRU,
              MATERIAL     TYPE MATNR,
              MATERIALDESC TYPE MAKTX,
              PLANT        TYPE WERKS_D,
              VALIDFROM    TYPE CHAR10,
              VALIDTO      TYPE CHAR10,
              SUPPLIER     TYPE LIFNR,
              SUPPLIERNAME TYPE CHAR30,
              PURCHASEORG  TYPE EKORG,
              TCODE        TYPE CHAR10,
              USER1        TYPE CHAR20,
              DATEANDTIME1 TYPE CHAR20,
              DOCNUMBER    TYPE CHAR10,
              ACTION1      TYPE CHAR15,
              CREATEDBY    TYPE CHAR15,
              CREATEDON    TYPE CHAR10,
              NUMBERS1     TYPE CHAR5,
              BLOCKED      TYPE CHAR1,
            END OF TY_STRU.

    DATA : IT_FINAL TYPE TABLE OF TY_STRU,
           WA_FINAL TYPE TY_STRU.


    SELECT A~MATNR     AS MATERIAL,
         B~MAKTX     AS MATERIALDESC,
         A~WERKS     AS PLANT,
         A~VDATU     AS VALIDFROM,
         A~BDATU     AS VALIDTO,
         A~LIFNR     AS SUPPLIER,
         C~NAME1     AS SUPPLIERNAME,
         A~EKORG     AS PURCHASEORG,
         A~ERNAM     AS CREATEDBY,
         A~ERDAT     AS CREATEDON,
         A~ZEORD     AS NUMBERS1,
         A~NOTKZ     AS BLOCKED
*           D~TCODE     AS TCODE,
*           D~USERNAME  AS USER,
*           D~UDATE     AS DATE,
*           D~CHANGENR  AS DocNumber,
      FROM EORD AS A
      LEFT OUTER JOIN MAKT AS B
      ON ( A~MATNR = B~MATNR )
      LEFT OUTER JOIN LFA1 AS C
      ON ( A~LIFNR = C~LIFNR )
*      LEFT OUTER JOIN CDPOS AS D
*      ON ( A~MATNR = A~MATNR )
      INTO TABLE @DATA(IT_EORD).


    LOOP AT IT_EORD INTO DATA(WA_EORD).

      MOVE-CORRESPONDING WA_EORD TO WA_FINAL.

      CONCATENATE WA_FINAL-MATERIAL ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '  WA_FINAL-PLANT
      INTO DATA(WA_MATPLT) SEPARATED BY SPACE.

      SELECT MAX( CHANGENR ) FROM CDPOS INTO @DATA(WA_CHGE) WHERE OBJECTID = @WA_MATPLT.
      SELECT SINGLE * FROM CDPOS INTO @DATA(WA_CDPOS) WHERE CHANGENR = @WA_CHGE.
      SELECT SINGLE * FROM CDHDR INTO @DATA(WA_CDHDR) WHERE CHANGENR = @WA_CHGE.

      WA_FINAL-TCODE  = WA_CDHDR-TCODE.
      WA_FINAL-USER1   = WA_CDHDR-USERNAME.
      WA_FINAL-DATEANDTIME1  = |{ WA_CDHDR-UDATE } & { WA_CDHDR-UTIME+0(2) }:{ WA_CDHDR-UTIME+2(2) }:{ WA_CDHDR-UTIME+4(2) }|.
      WA_FINAL-DOCNUMBER    = WA_CDHDR-CHANGENR.

      IF WA_CDPOS-CHNGIND = 'U'.
        WA_FINAL-ACTION1   = 'Change'.
      ELSEIF WA_CDPOS-CHNGIND = 'I' OR WA_CDPOS-CHNGIND = 'J'.
        WA_FINAL-ACTION1   = 'ENTRY'.
      ELSEIF WA_CDPOS-CHNGIND = 'E' OR WA_CDPOS-CHNGIND = 'D'..
        WA_FINAL-ACTION1   = 'DELETE'.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_FINAL-MATERIAL
        IMPORTING
          OUTPUT = WA_FINAL-MATERIAL.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_FINAL-NUMBERS1
        IMPORTING
          OUTPUT = WA_FINAL-NUMBERS1.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_FINAL-DOCNUMBER
        IMPORTING
          OUTPUT = WA_FINAL-DOCNUMBER.



      APPEND WA_FINAL TO IT_FINAL.
      CLEAR : WA_FINAL,WA_CDPOS,WA_CDHDR.

    ENDLOOP.






    DATA(JSON_WRITER) = CL_SXML_STRING_WRITER=>CREATE(
                       TYPE = IF_SXML=>CO_XT_JSON ).
    CALL TRANSFORMATION ID SOURCE RESULT = IT_FINAL
                           RESULT XML JSON_WRITER.
    DATA(JSON) = JSON_WRITER->GET_OUTPUT( ).

    DATA: LO_JSON_DATA TYPE REF TO ZCL_TREX_JSON_SERIALIZER,
          JSON1        TYPE STRING.

    CREATE OBJECT LO_JSON_DATA
      EXPORTING
        DATA = IT_FINAL.

* serialize data

    LO_JSON_DATA->SERIALIZE( ).

* get serialized json data string

    JSON1 = LO_JSON_DATA->GET_DATA( ).

    SERVER->RESPONSE->SET_CDATA(
         DATA = JSON1 ).







  ENDMETHOD.
